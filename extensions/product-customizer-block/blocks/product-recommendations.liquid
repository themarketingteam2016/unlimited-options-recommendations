{% comment %}
  Product Recommendations Bundle Widget
  Displays recommended products with multi-select and bulk add to cart
{% endcomment %}

<div id="unlimited-recommendations-{{ block.id }}" class="unlimited-recommendations" {{ block.shopify_attributes }}>
  <div id="recommendations-root"></div>
</div>

<!-- Variation Selection Modal -->
<div id="variation-modal-{{ block.id }}" class="unlimited-variation-modal" style="display: none;">
  <div class="unlimited-modal-overlay"></div>
  <div class="unlimited-modal-content">
    <div class="unlimited-modal-header">
      <h3>Select Variations for Bundle</h3>
      <button class="unlimited-modal-close">&times;</button>
    </div>
    <div class="unlimited-modal-body" id="modal-body-{{ block.id }}">
      <!-- Dynamic content will be inserted here -->
    </div>
    <div class="unlimited-modal-footer">
      <button class="unlimited-modal-cancel">Cancel</button>
      <button class="unlimited-modal-confirm">Add Selected to Cart</button>
    </div>
  </div>
</div>

<script>
  (function() {
    const productId = 'gid://shopify/Product/{{ product.id }}';
    const apiUrl = 'https://unlimtited-options-recommendations.vercel.app';
    const blockId = '{{ block.id }}';

    const container = document.getElementById('unlimited-recommendations-' + blockId);
    const root = container.querySelector('#recommendations-root');
    const modal = document.getElementById('variation-modal-' + blockId);
    const modalBody = document.getElementById('modal-body-' + blockId);

    let selectedProducts = new Set();
    let productVariantsCache = {};
    let selectedVariants = {};

    // Show loading state
    root.innerHTML = '<div style="text-align:center;padding:40px;color:#666;">Loading recommendations...</div>';

    async function loadRecommendations() {
      try {
        console.log('Loading recommendations for product:', productId);

        const response = await fetch(`${apiUrl}/api/products/${encodeURIComponent(productId)}/recommendations`);

        if (!response.ok) {
          if (response.status === 404) {
            root.style.display = 'none';
            return;
          }
          throw new Error('Failed to fetch recommendations');
        }

        const recommendations = await response.json();

        if (!recommendations || recommendations.length === 0) {
          root.style.display = 'none';
          return;
        }

        // Fetch variants for each product
        for (const rec of recommendations) {
          const product = rec.recommended_product;
          if (product && product.shopify_product_id) {
            await fetchProductVariants(product.shopify_product_id, product.id);
          }
        }

        renderRecommendations(recommendations);

      } catch (error) {
        console.error('Error loading recommendations:', error);
        root.style.display = 'none';
      }
    }

    async function fetchProductVariants(shopifyProductId, internalProductId) {
      try {
        const response = await fetch(`${apiUrl}/api/products/${encodeURIComponent(shopifyProductId)}/variants`);
        if (response.ok) {
          const variants = await response.json();
          productVariantsCache[internalProductId] = variants || [];
        } else {
          productVariantsCache[internalProductId] = [];
        }
      } catch (error) {
        console.error('Error fetching variants:', error);
        productVariantsCache[internalProductId] = [];
      }
    }

    function getStartingPrice(productId) {
      const variants = productVariantsCache[productId] || [];
      if (variants.length === 0) return null;

      const prices = variants.map(v => parseFloat(v.price)).filter(p => !isNaN(p));
      if (prices.length === 0) return null;

      return Math.min(...prices).toFixed(2);
    }

    function renderRecommendations(recommendations) {
      const html = `
        <div class="unlimited-recommendations-widget">
          <h3 class="unlimited-recommendations-title">Complete Your Bundle</h3>
          <p class="unlimited-recommendations-subtitle">Select products and add them together</p>

          <div class="unlimited-recommendations-grid">
            ${recommendations.map(rec => {
              const product = rec.recommended_product;
              if (!product) return '';

              const imageUrl = product.featuredImage?.url || product.image_url || '';
              const productUrl = `/products/${product.handle || ''}`;
              const startingPrice = getStartingPrice(product.id);
              const hasVariants = (productVariantsCache[product.id] || []).length > 0;

              return `
                <div class="unlimited-recommendation-card" data-product-id="${product.id}">
                  <div class="unlimited-recommendation-checkbox">
                    <input
                      type="checkbox"
                      id="product-${product.id}"
                      class="unlimited-product-checkbox"
                      data-product-id="${product.id}"
                      data-product-name="${product.title}"
                      data-has-variants="${hasVariants}"
                    >
                    <label for="product-${product.id}"></label>
                  </div>

                  <a href="${productUrl}" class="unlimited-recommendation-link">
                    ${imageUrl ? `
                      <div class="unlimited-recommendation-image">
                        <img src="${imageUrl}" alt="${product.title}" loading="lazy">
                      </div>
                    ` : ''}
                    <div class="unlimited-recommendation-details">
                      <h4 class="unlimited-recommendation-product-title">${product.title}</h4>
                      ${rec.reason ? `
                        <p class="unlimited-recommendation-reason">${rec.reason}</p>
                      ` : ''}
                      <div class="unlimited-recommendation-price">
                        ${startingPrice ? `
                          <span class="unlimited-price-label">Starting from</span>
                          <span class="unlimited-price-value">$${startingPrice}</span>
                        ` : `<span class="unlimited-price-value">Select options</span>`}
                      </div>
                    </div>
                  </a>
                </div>
              `;
            }).join('')}
          </div>

          <div class="unlimited-bundle-actions">
            <div class="unlimited-selected-count">
              <span id="selected-count-${blockId}">0</span> product(s) selected
            </div>
            <button
              class="unlimited-bulk-add-btn"
              id="bulk-add-btn-${blockId}"
              disabled
            >
              Add Selected to Cart
            </button>
          </div>
        </div>
      `;

      root.innerHTML = html;

      // Attach event listeners
      attachEventListeners();
    }

    function attachEventListeners() {
      // Checkbox changes
      const checkboxes = root.querySelectorAll('.unlimited-product-checkbox');
      checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', handleCheckboxChange);
      });

      // Bulk add button
      const bulkBtn = document.getElementById(`bulk-add-btn-${blockId}`);
      if (bulkBtn) {
        bulkBtn.addEventListener('click', handleBulkAdd);
      }

      // Modal close buttons
      const closeBtn = modal.querySelector('.unlimited-modal-close');
      const cancelBtn = modal.querySelector('.unlimited-modal-cancel');
      const confirmBtn = modal.querySelector('.unlimited-modal-confirm');
      const overlay = modal.querySelector('.unlimited-modal-overlay');

      if (closeBtn) closeBtn.addEventListener('click', closeModal);
      if (cancelBtn) cancelBtn.addEventListener('click', closeModal);
      if (overlay) overlay.addEventListener('click', closeModal);
      if (confirmBtn) confirmBtn.addEventListener('click', confirmBulkAdd);
    }

    function handleCheckboxChange(e) {
      const productId = e.target.dataset.productId;

      if (e.target.checked) {
        selectedProducts.add(productId);
      } else {
        selectedProducts.delete(productId);
        delete selectedVariants[productId];
      }

      updateSelectedCount();
    }

    function updateSelectedCount() {
      const countEl = document.getElementById(`selected-count-${blockId}`);
      const bulkBtn = document.getElementById(`bulk-add-btn-${blockId}`);

      if (countEl) {
        countEl.textContent = selectedProducts.size;
      }

      if (bulkBtn) {
        bulkBtn.disabled = selectedProducts.size === 0;
      }
    }

    function handleBulkAdd() {
      if (selectedProducts.size === 0) return;

      // Check if any selected product has variants
      const productsNeedingVariants = Array.from(selectedProducts).filter(productId => {
        const variants = productVariantsCache[productId] || [];
        return variants.length > 0;
      });

      if (productsNeedingVariants.length > 0) {
        // Show modal for variant selection
        showVariantModal(productsNeedingVariants);
      } else {
        // No variants needed, add directly
        confirmBulkAdd();
      }
    }

    function showVariantModal(productIds) {
      const modalContent = productIds.map(productId => {
        const variants = productVariantsCache[productId] || [];
        if (variants.length === 0) return '';

        // Extract attributes
        const attributes = extractAttributes(variants);
        const checkbox = root.querySelector(`input[data-product-id="${productId}"]`);
        const productName = checkbox?.dataset.productName || 'Product';

        return `
          <div class="unlimited-product-variant-section" data-product-id="${productId}">
            <h4 class="unlimited-variant-product-name">${productName}</h4>

            ${attributes.map(attr => `
              <div class="unlimited-variant-option-group">
                <label class="unlimited-variant-label">${attr.name}</label>
                <select class="unlimited-variant-select" data-product-id="${productId}" data-attribute-id="${attr.id}">
                  <option value="">Choose ${attr.name}</option>
                  ${attr.values.map(value => `
                    <option value="${value.id}">${value.value}</option>
                  `).join('')}
                </select>
              </div>
            `).join('')}

            <div class="unlimited-variant-preview" style="display: none;">
              <div class="unlimited-variant-price"></div>
              <div class="unlimited-variant-stock"></div>
            </div>
          </div>
        `;
      }).join('');

      modalBody.innerHTML = modalContent;

      // Attach variant selection listeners
      const selects = modalBody.querySelectorAll('.unlimited-variant-select');
      selects.forEach(select => {
        select.addEventListener('change', handleVariantSelection);
      });

      // Show modal
      modal.style.display = 'flex';
      document.body.style.overflow = 'hidden';
    }

    function extractAttributes(variants) {
      const uniqueAttrs = {};

      variants.forEach(variant => {
        variant.variant_options?.forEach(opt => {
          if (opt.attribute) {
            if (!uniqueAttrs[opt.attribute.id]) {
              uniqueAttrs[opt.attribute.id] = {
                ...opt.attribute,
                values: []
              };
            }
            if (!uniqueAttrs[opt.attribute.id].values.find(v => v.id === opt.attribute_value.id)) {
              uniqueAttrs[opt.attribute.id].values.push(opt.attribute_value);
            }
          }
        });
      });

      return Object.values(uniqueAttrs);
    }

    function handleVariantSelection(e) {
      const productId = e.target.dataset.productId;
      const variants = productVariantsCache[productId] || [];
      const section = modalBody.querySelector(`[data-product-id="${productId}"]`);

      if (!section) return;

      // Get all selected options for this product
      const selects = section.querySelectorAll('.unlimited-variant-select');
      const selectedOptions = {};

      selects.forEach(select => {
        const attrId = select.dataset.attributeId;
        const valueId = select.value;
        if (valueId) {
          selectedOptions[attrId] = valueId;
        }
      });

      // Find matching variant
      const matchedVariant = variants.find(variant => {
        return variant.variant_options?.every(opt =>
          selectedOptions[opt.attribute.id] === opt.attribute_value.id
        );
      });

      // Update preview
      const previewSection = section.querySelector('.unlimited-variant-preview');
      const priceEl = section.querySelector('.unlimited-variant-price');
      const stockEl = section.querySelector('.unlimited-variant-stock');

      if (matchedVariant) {
        selectedVariants[productId] = matchedVariant;
        previewSection.style.display = 'block';
        priceEl.textContent = `Price: $${matchedVariant.price}`;
        stockEl.textContent = matchedVariant.stock_quantity > 0
          ? `In Stock: ${matchedVariant.stock_quantity}`
          : 'Out of Stock';
        stockEl.style.color = matchedVariant.stock_quantity > 0 ? '#008060' : '#dc3545';
      } else {
        delete selectedVariants[productId];
        previewSection.style.display = 'none';
      }
    }

    function closeModal() {
      modal.style.display = 'none';
      document.body.style.overflow = 'auto';
    }

    async function confirmBulkAdd() {
      const confirmBtn = modal.querySelector('.unlimited-modal-confirm');
      const originalText = confirmBtn?.textContent || 'Add Selected to Cart';

      if (confirmBtn) {
        confirmBtn.disabled = true;
        confirmBtn.textContent = 'Adding...';
      }

      try {
        const itemsToAdd = [];

        for (const productId of selectedProducts) {
          const variants = productVariantsCache[productId] || [];

          if (variants.length === 0) {
            // No variants, skip or handle differently
            console.warn(`No variants for product ${productId}`);
            continue;
          }

          let variantToAdd = selectedVariants[productId];

          // If no variant selected but product has variants, skip
          if (!variantToAdd && variants.length > 0) {
            console.warn(`No variant selected for product ${productId}`);
            continue;
          }

          // If still no variant, use first available
          if (!variantToAdd) {
            variantToAdd = variants[0];
          }

          // Check stock
          if (variantToAdd.stock_quantity <= 0) {
            alert(`${variantToAdd.sku || 'Product'} is out of stock`);
            continue;
          }

          // Prepare variant for cart
          const apiResponse = await fetch(`${apiUrl}/api/cart/add-variant`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              variantId: variantToAdd.id,
              quantity: 1
            })
          });

          if (!apiResponse.ok) {
            const error = await apiResponse.json();
            console.error('Failed to prepare variant:', error);
            continue;
          }

          const apiData = await apiResponse.json();

          if (apiData.success && apiData.cartData) {
            itemsToAdd.push(apiData.cartData);
          }
        }

        if (itemsToAdd.length === 0) {
          throw new Error('No items to add. Please select variants for all products.');
        }

        // Add all items to cart in one request
        const cartResponse = await fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ items: itemsToAdd })
        });

        if (!cartResponse.ok) {
          const cartError = await cartResponse.json();
          throw new Error(cartError.description || 'Failed to add bundle to cart');
        }

        // Success!
        closeModal();

        // Reset selections
        selectedProducts.clear();
        selectedVariants = {};

        const checkboxes = root.querySelectorAll('.unlimited-product-checkbox');
        checkboxes.forEach(cb => cb.checked = false);

        updateSelectedCount();

        // Show success message
        const bulkBtn = document.getElementById(`bulk-add-btn-${blockId}`);
        if (bulkBtn) {
          bulkBtn.textContent = '✓ Added to Cart';
          bulkBtn.style.background = '#28a745';

          setTimeout(() => {
            bulkBtn.textContent = 'Add Selected to Cart';
            bulkBtn.style.background = '#008060';
          }, 2000);
        }

        // Trigger cart update
        document.dispatchEvent(new CustomEvent('cart:updated'));
        if (typeof window.Shopify !== 'undefined' && window.Shopify.onCartUpdate) {
          window.Shopify.onCartUpdate();
        }

      } catch (error) {
        console.error('Error adding bundle to cart:', error);
        alert(`Failed to add bundle: ${error.message}`);
      } finally {
        if (confirmBtn) {
          confirmBtn.disabled = false;
          confirmBtn.textContent = originalText;
        }
      }
    }

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', loadRecommendations);
    } else {
      loadRecommendations();
    }
  })();
</script>

<style>
  .unlimited-recommendations {
    margin: 40px 0;
    padding: 0;
  }

  .unlimited-recommendations-widget {
    max-width: 100%;
  }

  .unlimited-recommendations-title {
    font-size: 28px;
    font-weight: 700;
    color: #202223;
    margin-bottom: 8px;
    text-align: center;
  }

  .unlimited-recommendations-subtitle {
    font-size: 14px;
    color: #6d7175;
    text-align: center;
    margin-bottom: 32px;
  }

  .unlimited-recommendations-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 24px;
    margin-bottom: 24px;
  }

  @media (max-width: 768px) {
    .unlimited-recommendations-grid {
      grid-template-columns: 1fr;
      gap: 16px;
    }
  }

  .unlimited-recommendation-card {
    background: white;
    border: 2px solid #e3e5e7;
    border-radius: 12px;
    overflow: hidden;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    position: relative;
  }

  .unlimited-recommendation-card:hover {
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.12);
    transform: translateY(-4px);
    border-color: #008060;
  }

  .unlimited-recommendation-checkbox {
    position: absolute;
    top: 12px;
    left: 12px;
    z-index: 10;
  }

  .unlimited-recommendation-checkbox input[type="checkbox"] {
    width: 24px;
    height: 24px;
    cursor: pointer;
    accent-color: #008060;
  }

  .unlimited-recommendation-link {
    display: block;
    text-decoration: none;
    color: inherit;
  }

  .unlimited-recommendation-image {
    width: 100%;
    height: 250px;
    overflow: hidden;
    background: #f6f6f7;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .unlimited-recommendation-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .unlimited-recommendation-card:hover .unlimited-recommendation-image img {
    transform: scale(1.05);
  }

  .unlimited-recommendation-details {
    padding: 16px;
  }

  .unlimited-recommendation-product-title {
    font-size: 16px;
    font-weight: 600;
    color: #202223;
    margin: 0 0 8px 0;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .unlimited-recommendation-reason {
    font-size: 13px;
    color: #6d7175;
    margin: 0 0 12px 0;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .unlimited-recommendation-price {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }

  .unlimited-price-label {
    font-size: 12px;
    color: #6d7175;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .unlimited-price-value {
    font-size: 20px;
    font-weight: 700;
    color: #008060;
  }

  .unlimited-bundle-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    background: #f6f6f7;
    border-radius: 8px;
    margin-top: 24px;
  }

  .unlimited-selected-count {
    font-size: 16px;
    font-weight: 600;
    color: #202223;
  }

  .unlimited-selected-count span {
    color: #008060;
    font-size: 20px;
  }

  .unlimited-bulk-add-btn {
    padding: 14px 32px;
    border: none;
    background: #008060;
    color: white;
    font-size: 16px;
    font-weight: 600;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .unlimited-bulk-add-btn:hover:not(:disabled) {
    background: #006e52;
    transform: translateY(-2px);
  }

  .unlimited-bulk-add-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    background: #6d7175;
  }

  /* Modal Styles */
  .unlimited-variation-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .unlimited-modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.6);
  }

  .unlimited-modal-content {
    position: relative;
    background: white;
    border-radius: 12px;
    max-width: 600px;
    width: 90%;
    max-height: 80vh;
    display: flex;
    flex-direction: column;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
  }

  .unlimited-modal-header {
    padding: 24px;
    border-bottom: 1px solid #e3e5e7;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .unlimited-modal-header h3 {
    margin: 0;
    font-size: 20px;
    font-weight: 700;
    color: #202223;
  }

  .unlimited-modal-close {
    background: none;
    border: none;
    font-size: 32px;
    color: #6d7175;
    cursor: pointer;
    padding: 0;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    line-height: 1;
  }

  .unlimited-modal-close:hover {
    color: #202223;
  }

  .unlimited-modal-body {
    padding: 24px;
    overflow-y: auto;
    flex: 1;
  }

  .unlimited-product-variant-section {
    margin-bottom: 32px;
    padding-bottom: 32px;
    border-bottom: 1px solid #e3e5e7;
  }

  .unlimited-product-variant-section:last-child {
    margin-bottom: 0;
    padding-bottom: 0;
    border-bottom: none;
  }

  .unlimited-variant-product-name {
    font-size: 18px;
    font-weight: 600;
    color: #202223;
    margin: 0 0 16px 0;
  }

  .unlimited-variant-option-group {
    margin-bottom: 16px;
  }

  .unlimited-variant-label {
    display: block;
    font-weight: 600;
    color: #202223;
    margin-bottom: 8px;
    font-size: 14px;
  }

  .unlimited-variant-select {
    width: 100%;
    padding: 10px 14px;
    border: 2px solid #c9cccf;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    color: #202223;
    background: white;
    cursor: pointer;
    transition: all 0.2s;
  }

  .unlimited-variant-select:hover {
    border-color: #008060;
  }

  .unlimited-variant-select:focus {
    outline: none;
    border-color: #008060;
    box-shadow: 0 0 0 3px rgba(0, 128, 96, 0.1);
  }

  .unlimited-variant-preview {
    margin-top: 16px;
    padding: 12px;
    background: #f6f6f7;
    border-radius: 6px;
  }

  .unlimited-variant-price {
    font-size: 16px;
    font-weight: 600;
    color: #008060;
    margin-bottom: 4px;
  }

  .unlimited-variant-stock {
    font-size: 13px;
    color: #6d7175;
  }

  .unlimited-modal-footer {
    padding: 24px;
    border-top: 1px solid #e3e5e7;
    display: flex;
    gap: 12px;
    justify-content: flex-end;
  }

  .unlimited-modal-cancel {
    padding: 12px 24px;
    border: 2px solid #c9cccf;
    background: white;
    color: #202223;
    font-size: 14px;
    font-weight: 600;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .unlimited-modal-cancel:hover {
    border-color: #008060;
    color: #008060;
  }

  .unlimited-modal-confirm {
    padding: 12px 24px;
    border: none;
    background: #008060;
    color: white;
    font-size: 14px;
    font-weight: 600;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .unlimited-modal-confirm:hover:not(:disabled) {
    background: #006e52;
  }

  .unlimited-modal-confirm:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
</style>

{% schema %}
{
  "name": "Recommendations Bundle",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Complete Your Bundle"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 2,
      "max": 6,
      "step": 1,
      "label": "Number of products to show",
      "default": 3
    },
    {
      "type": "checkbox",
      "id": "show_reason",
      "label": "Show recommendation reason",
      "default": true
    }
  ]
}
{% endschema %}
