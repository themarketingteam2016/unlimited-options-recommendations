{% comment %}
  Product Customizer Integration

  Usage: Include this snippet in your product template
  {% render 'product-customizer', product: product %}
{% endcomment %}

<div id="unlimited-customizer-{{ product.id }}" class="unlimited-customizer" data-product-id="{{ product.id }}">
  <div class="unlimited-customizer__loading">
    <div class="spinner"></div>
    Loading customizer...
  </div>
</div>

<script>
(function() {
  const productId = 'gid://shopify/Product/{{ product.id }}';
  const container = document.getElementById('unlimited-customizer-{{ product.id }}');

  // Configuration - Update this with your app URL
  const APP_URL = 'https://unlimtited-options-recommendations.vercel.app';

  let variants = [];
  let attributes = [];
  let selectedOptions = {};
  let selectedVariant = null;
  let recommendations = [];
  let selectedRecommendations = new Set();
  let recommendationVariantsCache = {};
  let productDataCache = {};

  // Fetch product customizer data
  async function loadCustomizer() {
    try {
      // Fetch variants from your API
      const variantsRes = await fetch(`${APP_URL}/api/products/${encodeURIComponent(productId)}/variants`);
      const variantsData = await variantsRes.json();

      if (!variantsData || variantsData.length === 0) {
        container.innerHTML = '<p>No custom options available for this product.</p>';
        return;
      }

      variants = variantsData;

      // Extract unique attributes
      const uniqueAttrs = {};
      variants.forEach(variant => {
        variant.variant_options?.forEach(opt => {
          if (opt.attribute) {
            if (!uniqueAttrs[opt.attribute.id]) {
              uniqueAttrs[opt.attribute.id] = {
                ...opt.attribute,
                values: []
              };
            }
            if (!uniqueAttrs[opt.attribute.id].values.find(v => v.id === opt.attribute_value.id)) {
              uniqueAttrs[opt.attribute.id].values.push(opt.attribute_value);
            }
          }
        });
      });

      attributes = Object.values(uniqueAttrs);

      // Load recommendations
      await loadRecommendations();

      // Render customizer UI
      renderCustomizer();

    } catch (error) {
      console.error('Error loading customizer:', error);
      container.innerHTML = '<p>Error loading product options. Please refresh the page.</p>';
    }
  }

  async function loadRecommendations() {
    try {
      const response = await fetch(`${APP_URL}/api/products/${encodeURIComponent(productId)}/recommendations`);

      if (!response.ok) {
        recommendations = [];
        return;
      }

      const data = await response.json();
      recommendations = data || [];

      // Fetch variants for each recommended product
      for (const rec of recommendations) {
        const product = rec.recommended_product;
        if (product && product.shopify_product_id) {
          await fetchProductVariants(product.shopify_product_id, product.id);
          productDataCache[product.id] = {
            handle: product.handle || product.shopify_handle,
            shopify_product_id: product.shopify_product_id
          };
        }
      }
    } catch (error) {
      console.error('Error loading recommendations:', error);
      recommendations = [];
    }
  }

  async function fetchProductVariants(shopifyProductId, internalProductId) {
    try {
      const response = await fetch(`${APP_URL}/api/products/${encodeURIComponent(shopifyProductId)}/variants`);
      if (response.ok) {
        const variants = await response.json();
        recommendationVariantsCache[internalProductId] = variants || [];
      } else {
        recommendationVariantsCache[internalProductId] = [];
      }
    } catch (error) {
      console.error('Error fetching variants:', error);
      recommendationVariantsCache[internalProductId] = [];
    }
  }

  function renderCustomizer() {
    const html = `
      <div class="unlimited-customizer__content">
        <h3 class="unlimited-customizer__title">Customize Your Product</h3>

        <div class="unlimited-customizer__options">
          ${attributes.map(attr => `
            <div class="unlimited-option" data-attribute-id="${attr.id}">
              <label class="unlimited-option__label">
                ${attr.name}
              </label>

              <select class="unlimited-option__select" data-attribute-id="${attr.id}">
                <option value="">Choose ${attr.name}</option>
                ${attr.values.map(value => `
                  <option value="${value.id}">${value.value}</option>
                `).join('')}
              </select>

              <div class="unlimited-option__preview" style="display: none;">
                <img class="unlimited-option__image" src="" alt="">
              </div>
            </div>
          `).join('')}
        </div>

        <div class="unlimited-customizer__variant-info" style="display: none;">
          <div class="unlimited-variant-price"></div>
          <div class="unlimited-variant-sku" style="display: none;"></div>
        </div>

        ${recommendations.length > 0 ? `
          <div class="unlimited-recommendations">
            <h4 class="unlimited-recommendations__title">You May Also Like</h4>
            <div class="unlimited-recommendations__grid">
              ${recommendations.map(rec => {
                const product = rec.recommended_product;
                if (!product) return '';

                const imageUrl = product.featuredImage?.url || product.image_url || '';

                return `
                  <div class="unlimited-recommendation-item" data-product-id="${product.id}">
                    <input
                      type="checkbox"
                      class="unlimited-recommendation-checkbox"
                      id="rec-${product.id}"
                      data-product-id="${product.id}"
                      data-product-name="${product.title}"
                    >
                    <label for="rec-${product.id}" class="unlimited-recommendation-label">
                      ${imageUrl ? `
                        <img src="${imageUrl}" alt="${product.title}" class="unlimited-recommendation-image">
                      ` : `
                        <div class="unlimited-recommendation-image unlimited-recommendation-placeholder">
                          <span>No Image</span>
                        </div>
                      `}
                      <div class="unlimited-recommendation-info">
                        <div class="unlimited-recommendation-name">${product.title}</div>
                      </div>
                    </label>
                  </div>
                `;
              }).join('')}
            </div>
          </div>
        ` : ''}

        <div class="unlimited-customizer__actions">
          <button type="button" class="unlimited-add-to-cart btn" disabled>
            Select All Options
          </button>
        </div>
      </div>
    `;

    container.innerHTML = html;
    attachEventListeners();
  }

  function attachEventListeners() {
    // Dropdown change handlers
    const selects = container.querySelectorAll('.unlimited-option__select');
    selects.forEach(select => {
      select.addEventListener('change', function() {
        const attrId = this.dataset.attributeId;
        const valueId = this.value;

        if (valueId) {
          selectedOptions[attrId] = valueId;

          // Show image preview
          const attr = attributes.find(a => a.id === attrId);
          const value = attr?.values.find(v => v.id === valueId);
          const preview = this.closest('.unlimited-option').querySelector('.unlimited-option__preview');
          const previewImg = preview.querySelector('.unlimited-option__image');

          if (value?.image_url) {
            previewImg.src = value.image_url;
            previewImg.alt = value.value;
            preview.style.display = 'block';
          } else {
            preview.style.display = 'none';
          }
        } else {
          delete selectedOptions[attrId];
        }

        updateVariant();
      });
    });

    // Recommendation checkbox handlers
    const recCheckboxes = container.querySelectorAll('.unlimited-recommendation-checkbox');
    recCheckboxes.forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        const productId = this.dataset.productId;

        if (this.checked) {
          selectedRecommendations.add(productId);
        } else {
          selectedRecommendations.delete(productId);
        }

        updateVariant();
      });
    });

    // Add to cart button
    const addToCartBtn = container.querySelector('.unlimited-add-to-cart');
    addToCartBtn.addEventListener('click', addToCart);
  }

  function updateVariant() {
    const variantInfo = container.querySelector('.unlimited-customizer__variant-info');
    const priceEl = container.querySelector('.unlimited-variant-price');
    const skuEl = container.querySelector('.unlimited-variant-sku');
    const addToCartBtn = container.querySelector('.unlimited-add-to-cart');

    // Check if all options selected
    const allSelected = attributes.every(attr => selectedOptions[attr.id]);

    if (allSelected) {
      // Find matching variant
      const match = variants.find(variant => {
        return variant.variant_options?.every(opt =>
          selectedOptions[opt.attribute.id] === opt.attribute_value.id
        );
      });

      selectedVariant = match || null;

      if (selectedVariant) {
        // Show variant info
        variantInfo.style.display = 'block';
        priceEl.innerHTML = `<strong>Price:</strong> $${selectedVariant.price}`;

        if (selectedVariant.sku) {
          skuEl.innerHTML = `<strong>SKU:</strong> ${selectedVariant.sku}`;
          skuEl.style.display = 'block';
        }

        // Enable add to cart with dynamic text
        addToCartBtn.disabled = false;

        if (selectedRecommendations.size > 0) {
          addToCartBtn.textContent = 'Add Bundle to Cart';
        } else {
          addToCartBtn.textContent = 'Add to Cart';
        }
      } else {
        variantInfo.style.display = 'none';
        addToCartBtn.disabled = true;
        addToCartBtn.textContent = 'Variant Not Available';
      }
    } else {
      variantInfo.style.display = 'none';
      addToCartBtn.disabled = true;
      addToCartBtn.textContent = 'Select All Options';
    }
  }

  // Get main product selections for smart pre-fill
  function getMainProductSelections() {
    const selections = {};

    attributes.forEach(attr => {
      const valueId = selectedOptions[attr.id];
      if (valueId) {
        const value = attr.values.find(v => v.id === valueId);
        if (value) {
          selections[attr.id] = {
            valueId: valueId,
            attrName: attr.name,
            valueText: value.value
          };
        }
      }
    });

    return selections;
  }

  // Find matching or nearest attribute value
  function findMatchingValue(mainSelection, availableValues) {
    if (!mainSelection || !availableValues || availableValues.length === 0) {
      return null;
    }

    // First try: Exact match by value text (case-insensitive)
    const exactMatch = availableValues.find(v =>
      v.value.toLowerCase() === mainSelection.valueText.toLowerCase()
    );
    if (exactMatch) return exactMatch.id;

    // Second try: Partial match (contains)
    const partialMatch = availableValues.find(v =>
      v.value.toLowerCase().includes(mainSelection.valueText.toLowerCase()) ||
      mainSelection.valueText.toLowerCase().includes(v.value.toLowerCase())
    );
    if (partialMatch) return partialMatch.id;

    // Third try: For numeric values, find nearest (e.g., carat weight)
    const mainValue = parseFloat(mainSelection.valueText);
    if (!isNaN(mainValue)) {
      const numericValues = availableValues
        .map(v => ({ ...v, numeric: parseFloat(v.value) }))
        .filter(v => !isNaN(v.numeric));

      if (numericValues.length > 0) {
        const nearest = numericValues.reduce((prev, curr) =>
          Math.abs(curr.numeric - mainValue) < Math.abs(prev.numeric - mainValue) ? curr : prev
        );
        return nearest.id;
      }
    }

    // No match found - return default or first
    const defaultValue = availableValues.find(v => v.is_default);
    return defaultValue?.id || null;
  }

  // Extract attributes from variants
  function extractAttributes(variants) {
    const uniqueAttrs = {};

    variants.forEach(variant => {
      variant.variant_options?.forEach(opt => {
        if (opt.attribute) {
          if (!uniqueAttrs[opt.attribute.id]) {
            uniqueAttrs[opt.attribute.id] = {
              ...opt.attribute,
              values: []
            };
          }
          if (!uniqueAttrs[opt.attribute.id].values.find(v => v.id === opt.attribute_value.id)) {
            uniqueAttrs[opt.attribute.id].values.push(opt.attribute_value);
          }
        }
      });
    });

    return Object.values(uniqueAttrs);
  }

  async function addToCart() {
    if (!selectedVariant) return;

    const addToCartBtn = container.querySelector('.unlimited-add-to-cart');
    addToCartBtn.disabled = true;
    addToCartBtn.textContent = 'Adding...';

    try {
      const itemsToAdd = [];

      // Add main product
      itemsToAdd.push({
        id: selectedVariant.shopify_variant_id || selectedVariant.id,
        quantity: 1
      });

      // Handle recommendations with smart pre-fill if any selected
      if (selectedRecommendations.size > 0) {
        const mainSelections = getMainProductSelections();

        for (const productId of selectedRecommendations) {
          const recVariants = recommendationVariantsCache[productId] || [];

          if (recVariants.length === 0) continue;

          // Extract attributes for this recommendation
          const recAttributes = extractAttributes(recVariants);

          // Build pre-filled selections
          const preFilledSelections = {};

          recAttributes.forEach(attr => {
            // Try to match with main product selections
            const matchingMainSelection = Object.values(mainSelections).find(sel =>
              sel.attrName && attr.name &&
              sel.attrName.toLowerCase() === attr.name.toLowerCase()
            );

            if (matchingMainSelection) {
              const matchedValueId = findMatchingValue(
                { valueText: matchingMainSelection.valueText },
                attr.values
              );

              if (matchedValueId) {
                preFilledSelections[attr.id] = matchedValueId;
              }
            } else {
              // No match, use default or first
              const defaultValue = attr.values.find(v => v.is_default);
              if (defaultValue) {
                preFilledSelections[attr.id] = defaultValue.id;
              }
            }
          });

          // Find matching variant from pre-filled selections
          const matchedVariant = recVariants.find(variant => {
            return variant.variant_options?.every(opt =>
              preFilledSelections[opt.attribute.id] === opt.attribute_value.id
            );
          });

          if (matchedVariant) {
            itemsToAdd.push({
              id: matchedVariant.shopify_variant_id || matchedVariant.id,
              quantity: 1
            });
          }
        }
      }

      // Add all items to cart
      const response = await fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ items: itemsToAdd })
      });

      if (response.ok) {
        // Success!
        addToCartBtn.textContent = '✓ Added to Cart';

        // Clear recommendation selections
        selectedRecommendations.clear();
        const checkboxes = container.querySelectorAll('.unlimited-recommendation-checkbox');
        checkboxes.forEach(cb => cb.checked = false);

        // Trigger cart update
        if (typeof window.Shopify !== 'undefined' && window.Shopify.onCartUpdate) {
          window.Shopify.onCartUpdate();
        }
        document.dispatchEvent(new CustomEvent('cart:updated'));

        // Reset after 2 seconds
        setTimeout(() => {
          addToCartBtn.textContent = 'Add to Cart';
          addToCartBtn.disabled = false;
        }, 2000);
      } else {
        throw new Error('Failed to add to cart');
      }
    } catch (error) {
      console.error('Add to cart error:', error);
      addToCartBtn.textContent = 'Error - Try Again';
      setTimeout(() => {
        const hasRecommendations = selectedRecommendations.size > 0;
        addToCartBtn.textContent = hasRecommendations ? 'Add Bundle to Cart' : 'Add to Cart';
        addToCartBtn.disabled = false;
      }, 2000);
    }
  }

  // Initialize
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadCustomizer);
  } else {
    loadCustomizer();
  }
})();
</script>

<style>
.unlimited-customizer {
  margin: 30px 0;
  padding: 20px;
  border: 1px solid #e5e5e5;
  border-radius: 8px;
  background: #fff;
}

.unlimited-customizer__loading {
  text-align: center;
  padding: 40px 20px;
  color: #666;
}

.unlimited-customizer__title {
  font-size: 20px;
  font-weight: 600;
  margin-bottom: 20px;
  color: #333;
}

.unlimited-customizer__options {
  margin-bottom: 20px;
}

.unlimited-option {
  margin-bottom: 20px;
}

.unlimited-option__label {
  display: block;
  font-weight: 600;
  margin-bottom: 8px;
  color: #333;
}

.unlimited-option__select {
  width: 100%;
  padding: 12px;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 14px;
  background: white;
}

.unlimited-option__select:focus {
  outline: none;
  border-color: #008060;
}

.unlimited-option__preview {
  margin-top: 10px;
  padding: 10px;
  background: #f9f9f9;
  border-radius: 4px;
  text-align: center;
}

.unlimited-option__image {
  max-width: 80px;
  height: auto;
  border-radius: 4px;
}

.unlimited-customizer__variant-info {
  margin: 20px 0;
  padding: 15px;
  background: #f9f9f9;
  border-radius: 4px;
}

.unlimited-variant-price {
  font-size: 24px;
  color: #008060;
  margin-bottom: 8px;
}

.unlimited-variant-sku {
  font-size: 12px;
  color: #999;
}

.unlimited-customizer__actions {
  display: flex;
  gap: 20px;
  align-items: center;
}

.unlimited-add-to-cart {
  flex: 1;
  padding: 14px 24px;
  font-size: 16px;
  font-weight: 600;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  background: #008060;
  color: white;
  transition: background 0.2s;
}

.unlimited-add-to-cart:hover:not(:disabled) {
  background: #006e52;
}

.unlimited-add-to-cart:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  background: #999;
}

.spinner {
  width: 40px;
  height: 40px;
  margin: 0 auto;
  border: 4px solid #f3f3f3;
  border-top: 4px solid #008060;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Recommendations Styles */
.unlimited-recommendations {
  margin: 24px 0;
  padding: 20px;
  background: #f9f9f9;
  border-radius: 8px;
}

.unlimited-recommendations__title {
  font-size: 16px;
  font-weight: 600;
  margin-bottom: 16px;
  color: #333;
}

.unlimited-recommendations__grid {
  display: flex;
  flex-wrap: wrap;
  gap: 12px;
}

.unlimited-recommendation-item {
  position: relative;
  flex: 0 0 150px;
}

.unlimited-recommendation-checkbox {
  position: absolute;
  top: 8px;
  left: 8px;
  width: 20px;
  height: 20px;
  cursor: pointer;
  z-index: 10;
  accent-color: #008060;
}

.unlimited-recommendation-label {
  display: block;
  cursor: pointer;
  border: 2px solid #e0e0e0;
  border-radius: 8px;
  overflow: hidden;
  transition: all 0.2s;
  background: white;
}

.unlimited-recommendation-label:hover {
  border-color: #008060;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.unlimited-recommendation-item input:checked + .unlimited-recommendation-label {
  border-color: #008060;
  box-shadow: 0 4px 12px rgba(0, 128, 96, 0.3);
}

.unlimited-recommendation-image {
  width: 150px;
  height: 150px;
  object-fit: cover;
  display: block;
}

.unlimited-recommendation-placeholder {
  width: 150px;
  height: 150px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #f0f0f0;
  color: #999;
  font-size: 12px;
}

.unlimited-recommendation-info {
  padding: 8px;
  background: white;
}

.unlimited-recommendation-name {
  font-size: 12px;
  font-weight: 500;
  color: #333;
  line-height: 1.3;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
}

@media (max-width: 768px) {
  .unlimited-recommendations__grid {
    justify-content: center;
  }
}
</style>
